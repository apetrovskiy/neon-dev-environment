version: "3"

x-builder-common: &x-builder-common
    build:
      context: ./images
      dockerfile: Builder-Dockerfile
    image: evm_builder:latest
    environment:
      NEON_REVISION: ${NEON_REVISION:-tracing}
    volumes:
      - ./neon-evm/evm_loader/:/opt/evm_loader/
    working_dir: /opt/evm_loader

services:
  validator-builder:
    build:
      context: ./solana-account-dumper/ci/docker-rust-nightly
      dockerfile: Dockerfile
    image: validator-account-dumper:latest
    environment:
      NEON_REVISION: ${NEON_REVISION:-tracing}
      
  neon-builder:
    <<: *x-builder-common
    container_name: neon-builder
    entrypoint: >
      bash -c "cd program && /opt/evm_loader/ci_checks.sh
      && cargo build --release --all --features tracing
      && cargo build-bpf"
    
  neon-cleaner:
    <<: *x-builder-common
    container_name: neon-cleaner
    entrypoint: cargo clean
    
  tracer_db:
    container_name: tracer_db
    hostname: tracer_db
    image: yandex/clickhouse-server:21.3.20.1
    expose:
      - "8123"
      - "9000"
      - "9009"
    volumes:
      - ./tracer-api-data:/var/lib/clickhouse
      - ./tracer-api/clickhouse/config.xml:/etc/clickhouse-server/config.xml
      - ./tracer-api/clickhouse/users.xml:/etc/clickhouse-server/users.d/user.xml
      - ./tracer-api/clickhouse/202110061400_initial.up.sql:/etc/clickhouse-server/schema.sql
      - ./tracer-api/clickhouse/deploy.sh:/docker-entrypoint-initdb.d/deploy.sh
    healthcheck:
      test: ["CMD-SHELL", "clickhouse-client -q 'SELECT 1'"]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 10s
    
  validator:
    container_name: validator
    image: validator-account-dumper:latest
    environment:
      SOLANA_URL: http://validator:8899
      RUST_LOG: solana_runtime::system_instruction_processor=trace,solana_runtime::message_processor=debug,solana_bpf_loader=debug,solana_rbpf=debug
    hostname: validator
    ports:
      - 0.0.0.0:8899:8899
    expose:
      - "8899"
      - "9900"
      - "8900"
      - "8001"
      - "8001-8009/udp"
    networks:
      - net
    volumes:
      - ./solana-account-dumper/scripts/run.sh:/opt/solana/run.sh
    depends_on:
      tracer_db:
        condition: service_healthy
    healthcheck:
      # Must be available from outside (calling without -u causes premature result)
      test: [ CMD-SHELL, "solana cluster-version -u http://validator:8899" ]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 10s

  deploy-evm:
    container_name: evm_loader
    image: neonlabsorg/evm_loader:${EVM_LOADER_REVISION:-latest}
    environment:
      - SOLANA_URL=http://validator:8899
    networks:
      - net
    depends_on:
      validator:
        condition: service_healthy
    command: bash -c "create-test-accounts.sh 1 && deploy-evm.sh"
    volumes:
      - ./neon-evm/evm_loader/target/release/neon-cli:/opt/neon-cli
      - ./neon-evm/evm_loader/target/deploy/evm_loader.so:/opt/evm_loader.so

  postgres:
    container_name: postgres
    image: postgres:14.0
    command: postgres -c 'max_connections=1000'
    environment:
      POSTGRES_DB: neon-db
      POSTGRES_USER: neon-proxy
      POSTGRES_PASSWORD: neon-proxy-pass
    hostname: postgres
    ports:
      - 127.0.0.1:5432:5432
    expose:
      - "5432"
    networks:
      - net
    healthcheck:
      test: [ CMD-SHELL, "pg_isready -h postgres -p 5432" ]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 5s
      
  indexer:
    container_name: indexer
    image: neonlabsorg/proxy:${PROXY_REVISION:-latest}
    environment:
      SOLANA_URL: http://validator:8899
      POSTGRES_DB: neon-db
      POSTGRES_USER: neon-proxy
      POSTGRES_PASSWORD: neon-proxy-pass
      CONFIG: ci
    hostname: indexer
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - net
    entrypoint: proxy/run-indexer.sh

  proxy:
    container_name: proxy
    image: neonlabsorg/proxy:${PROXY_REVISION:-latest}
    environment:
      SOLANA_URL: http://validator:8899
      POSTGRES_DB: neon-db
      POSTGRES_USER: neon-proxy
      POSTGRES_PASSWORD: neon-proxy-pass
      NEON_CLI_TIMEOUT: 2
      LOG_SENDING_SOLANA_TRANSACTION: "YES"
      LOG_NEON_CLI_DEBUG: "YES"
      FUZZING_BLOCKHASH: "YES"
      CONFIG: ci
      PP_SOLANA_URL: https://api.devnet.solana.com
      PYTH_MAPPING_ACCOUNT: BmA9Z6FjioHJPpjT39QazZyhDRUdZy2ezwx4GiDdE2u2
      MIN_OPERATOR_BALANCE_TO_WARN: 4565760000 # = 913152000 * 5 (5 storage accounts) = 4.56576 SOL
      MIN_OPERATOR_BALANCE_TO_ERR: 913152000 # = solana rent 131072 (= Rent-exempt minimum: 0.913152 SOL) SOLs to create a storage
    hostname: proxy
    depends_on:
      validator:
        condition: service_healthy
      postgres:
        condition: service_healthy
      indexer:
        condition: service_started
    ports:
      - 127.0.0.1:9090:9090
    expose:
      - "9090"
    networks:
      - net
    entrypoint: proxy/run-test-proxy.sh
    volumes:
      - ./neon-evm/evm_loader/target/release/neon-cli:/spl/bin/neon-cli
      - ./proxy-model.py:/opt

networks:
  net:

